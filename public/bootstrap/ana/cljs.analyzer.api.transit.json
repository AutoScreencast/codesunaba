["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:doc","This is intended to be a stable api for those who need programmatic access\n  to the analyzer.","~:file","cljs/analyzer/api.cljc","~:line",9,"~:column",5,"~:end-line",9,"~:end-column",22],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",null,"~:excludes",["~#set",["~$find-ns","~$remove-ns","~$ns-publics","~$ns-resolve","~$ns-interns","~$all-ns","~$resolve"]],"~:name","~$cljs.analyzer.api","~:imports",null,"~:requires",["^ ","~$cljs.analyzer","^N","~$ana","^N","~$cljs.env","^P","~$env","^P","~$cljs.core","^R","~$goog","^S"],"~:seen",["^B",["~:require"]],"~:shadow/js-access-global",["^B",["Error"]],"~:uses",null,"~:defs",["^ ","^C",["^ ","~:protocol-inline",null,"^2",["^ ","^4","cljs/analyzer/api.cljc","^5",220,"^6",7,"^7",220,"^8",14,"~:arglists",["~#list",["~$quote",["^[",[["~$sym"],["~$state","^11"]]]]],"^3","Given a namespace return the corresponding namespace analysis map. Analagous\n  to clojure.core/find-ns.","~:top-fn",["^ ","~:variadic?",false,"~:fixed-arity",2,"~:max-fixed-arity",2,"~:method-params",[["^11"],["^12","^11"]],"^Z",["^[",[["^11"],["^12","^11"]]],"~:arglists-meta",["^[",[null,null]]]],"^J","~$cljs.analyzer.api/find-ns","^4","cljs/analyzer/api.cljc","^8",14,"^13",["^ ","^14",false,"^15",2,"^16",2,"^17",[["^11"],["^12","^11"]],"^Z",["^[",[["^11"],["^12","^11"]]],"^18",["^[",[null,null]]],"^17",[["^11"],["^12","^11"]],"~:protocol-impl",null,"^15",2,"^18",["^[",[null,null]],"^6",1,"^14",false,"~:methods",[["^ ","^15",1,"^14",false,"~:tag","~$any"],["^ ","^15",2,"^14",false,"^1<",["^B",[null,"^1="]]]],"^5",220,"^7",220,"^16",2,"~:fn-var",true,"^Z",["^[",[["^11"],["^12","^11"]]],"^3","Given a namespace return the corresponding namespace analysis map. Analagous\n  to clojure.core/find-ns."],"^D",["^ ","^Y",null,"^2",["^ ","^4","cljs/analyzer/api.cljc","^5",262,"^6",7,"^7",262,"^8",16,"^Z",["^[",["^10",["^[",[["~$ns"],["^12","^1?"]]]]],"^3","Removes the namespace named by the symbol.","^13",["^ ","^14",false,"^15",2,"^16",2,"^17",[["^1?"],["^12","^1?"]],"^Z",["^[",[["^1?"],["^12","^1?"]]],"^18",["^[",[null,null]]]],"^J","~$cljs.analyzer.api/remove-ns","^4","cljs/analyzer/api.cljc","^8",16,"^13",["^ ","^14",false,"^15",2,"^16",2,"^17",[["^1?"],["^12","^1?"]],"^Z",["^[",[["^1?"],["^12","^1?"]]],"^18",["^[",[null,null]]],"^17",[["^1?"],["^12","^1?"]],"^1:",null,"^15",2,"^18",["^[",[null,null]],"^6",1,"^14",false,"^1;",[["^ ","^15",1,"^14",false,"^1<","^1="],["^ ","^15",2,"^14",false,"^1<",["^B",[null,"^1="]]]],"^5",262,"^7",262,"^16",2,"^1>",true,"^Z",["^[",[["^1?"],["^12","^1?"]]],"^3","Removes the namespace named by the symbol."],"^E",["^ ","^Y",null,"^2",["^ ","^4","cljs/analyzer/api.cljc","^5",240,"^6",7,"^7",240,"^8",17,"^Z",["^[",["^10",["^[",[["^1?"],["^12","^1?"]]]]],"^3","Given a namespace return all the public var analysis maps. Analagous to\n  clojure.core/ns-publics but returns var analysis maps not vars.","^13",["^ ","^14",false,"^15",2,"^16",2,"^17",[["^1?"],["^12","^1?"]],"^Z",["^[",[["^1?"],["^12","^1?"]]],"^18",["^[",[null,null]]]],"^J","~$cljs.analyzer.api/ns-publics","^4","cljs/analyzer/api.cljc","^8",17,"^13",["^ ","^14",false,"^15",2,"^16",2,"^17",[["^1?"],["^12","^1?"]],"^Z",["^[",[["^1?"],["^12","^1?"]]],"^18",["^[",[null,null]]],"^17",[["^1?"],["^12","^1?"]],"^1:",null,"^15",2,"^18",["^[",[null,null]],"^6",1,"^14",false,"^1;",[["^ ","^15",1,"^14",false,"^1<","^1="],["^ ","^15",2,"^14",false,"^1<",["^B",[null,"~$clj","^1="]]]],"^5",240,"^7",240,"^16",2,"^1>",true,"^Z",["^[",[["^1?"],["^12","^1?"]]],"^3","Given a namespace return all the public var analysis maps. Analagous to\n  clojure.core/ns-publics but returns var analysis maps not vars."],"~$get-options",["^ ","^Y",null,"^2",["^ ","^4","cljs/analyzer/api.cljc","^5",102,"^6",7,"^7",102,"^8",18,"^Z",["^[",["^10",["^[",[[],["^12"]]]]],"^3","Return the compiler options from compiler state.","^13",["^ ","^14",false,"^15",1,"^16",1,"^17",[[],["^12"]],"^Z",["^[",[[],["^12"]]],"^18",["^[",[null,null]]]],"^J","~$cljs.analyzer.api/get-options","^4","cljs/analyzer/api.cljc","^8",18,"^13",["^ ","^14",false,"^15",1,"^16",1,"^17",[[],["^12"]],"^Z",["^[",[[],["^12"]]],"^18",["^[",[null,null]]],"^17",[[],["^12"]],"^1:",null,"^15",1,"^18",["^[",[null,null]],"^6",1,"^14",false,"^1;",[["^ ","^15",0,"^14",false,"^1<","^1="],["^ ","^15",1,"^14",false,"^1<",["^B",["^1=","~$clj-nil"]]]],"^5",102,"^7",102,"^16",1,"^1>",true,"^Z",["^[",[[],["^12"]]],"^3","Return the compiler options from compiler state."],"~$warning-message",["^ ","^Y",null,"^2",["^ ","^4","cljs/analyzer/api.cljc","^5",91,"^6",7,"^7",91,"^8",22,"^Z",["^[",["^10",["^[",[["~$warn-type","~$warn-info"]]]]],"^3","Helper for generating the standard analyzer messages for warnings. Should be\n  passed warn-type and warn-info. See with-warning-handlers."],"^J","~$cljs.analyzer.api/warning-message","^4","cljs/analyzer/api.cljc","^8",22,"^17",["^[",[["^1G","^1H"]]],"^1:",null,"^18",["^[",[null,null]],"^6",1,"^14",false,"^5",91,"~:ret-tag","^1=","^7",91,"^16",2,"^1>",true,"^Z",["^[",["^10",["^[",[["^1G","^1H"]]]]],"^3","Helper for generating the standard analyzer messages for warnings. Should be\n  passed warn-type and warn-info. See with-warning-handlers."],"~$warning-enabled?",["^ ","^Y",null,"^2",["^ ","^4","cljs/analyzer/api.cljc","^5",69,"^6",7,"^7",69,"^8",23,"^Z",["^[",["^10",["^[",[["~$warning-type"]]]]],"^3","Test if the given warning-type is enabled."],"^J","~$cljs.analyzer.api/warning-enabled?","^4","cljs/analyzer/api.cljc","^8",23,"^17",["^[",[["^1L"]]],"^1:",null,"^18",["^[",[null,null]],"^6",1,"^14",false,"^5",69,"^1J","^1=","^7",69,"^16",1,"^1>",true,"^Z",["^[",["^10",["^[",[["^1L"]]]]],"^3","Test if the given warning-type is enabled."],"~$current-state",["^ ","^Y",null,"^2",["^ ","^4","cljs/analyzer/api.cljc","^5",36,"^6",7,"^7",36,"^8",20,"^Z",["^[",["^10",["^[",[[]]]]],"^3","Return the current compiler state atom."],"^J","~$cljs.analyzer.api/current-state","^4","cljs/analyzer/api.cljc","^8",20,"^17",["^[",[[]]],"^1:",null,"^18",["^[",[null,null]],"^6",1,"^14",false,"^5",36,"^1J","^1=","^7",36,"^16",0,"^1>",true,"^Z",["^[",["^10",["^[",[[]]]]],"^3","Return the current compiler state atom."],"^F",["^ ","^Y",null,"^2",["^ ","^4","cljs/analyzer/api.cljc","^5",253,"^6",7,"^7",253,"^8",17,"^Z",["^[",["^10",["^[",[["^1?","^11"],["^12","^1?","^11"]]]]],"^3","Given a namespace and a symbol return the corresponding var analysis map.\n  Analagous to clojure.core/ns-resolve but returns var analysis map not Var.","^13",["^ ","^14",false,"^15",3,"^16",3,"^17",[["^1?","^11"],["^12","^1?","^11"]],"^Z",["^[",[["^1?","^11"],["^12","^1?","^11"]]],"^18",["^[",[null,null]]]],"^J","~$cljs.analyzer.api/ns-resolve","^4","cljs/analyzer/api.cljc","^8",17,"^13",["^ ","^14",false,"^15",3,"^16",3,"^17",[["^1?","^11"],["^12","^1?","^11"]],"^Z",["^[",[["^1?","^11"],["^12","^1?","^11"]]],"^18",["^[",[null,null]]],"^17",[["^1?","^11"],["^12","^1?","^11"]],"^1:",null,"^15",3,"^18",["^[",[null,null]],"^6",1,"^14",false,"^1;",[["^ ","^15",2,"^14",false,"^1<","^1="],["^ ","^15",3,"^14",false,"^1<",["^B",[null,"^1="]]]],"^5",253,"^7",253,"^16",3,"^1>",true,"^Z",["^[",[["^1?","^11"],["^12","^1?","^11"]]],"^3","Given a namespace and a symbol return the corresponding var analysis map.\n  Analagous to clojure.core/ns-resolve but returns var analysis map not Var."],"~$enabled-warnings",["^ ","^Y",null,"^2",["^ ","^4","cljs/analyzer/api.cljc","^5",97,"^6",7,"^7",97,"^8",23,"^Z",["^[",["^10",["^[",[[]]]]],"^3","Get the enabled warning types."],"^J","~$cljs.analyzer.api/enabled-warnings","^4","cljs/analyzer/api.cljc","^8",23,"^17",["^[",[[]]],"^1:",null,"^18",["^[",[null,null]],"^6",1,"^14",false,"^5",97,"^1J","^1=","^7",97,"^16",0,"^1>",true,"^Z",["^[",["^10",["^[",[[]]]]],"^3","Get the enabled warning types."],"~$empty-state",["^ ","^Y",null,"^2",["^ ","^4","cljs/analyzer/api.cljc","^5",25,"^6",7,"^7",25,"^8",18,"^Z",["^[",["^10",["^[",[[],["~$opts"]]]]],"^3","Creates an empty compilation state Atom<Map>. The optional opts arg is a map\n   representing the compiler configuration. See the documentation\n   for details: https://clojurescript.org/reference/compiler-options","^13",["^ ","^14",false,"^15",1,"^16",1,"^17",[[],["^1T"]],"^Z",["^[",[[],["^1T"]]],"^18",["^[",[null,null]]]],"^J","~$cljs.analyzer.api/empty-state","^4","cljs/analyzer/api.cljc","^8",18,"^13",["^ ","^14",false,"^15",1,"^16",1,"^17",[[],["^1T"]],"^Z",["^[",[[],["^1T"]]],"^18",["^[",[null,null]]],"^17",[[],["^1T"]],"^1:",null,"^15",1,"^18",["^[",[null,null]],"^6",1,"^14",false,"^1;",[["^ ","^15",0,"^14",false,"^1<","^1="],["^ ","^15",1,"^14",false,"^1<","~$cljs.core/Atom"]],"^5",25,"^7",25,"^16",1,"^1>",true,"^Z",["^[",[[],["^1T"]]],"^3","Creates an empty compilation state Atom<Map>. The optional opts arg is a map\n   representing the compiler configuration. See the documentation\n   for details: https://clojurescript.org/reference/compiler-options"],"~$default-passes",["^ ","^2",["^ ","^4","cljs/analyzer/api.cljc","^5",117,"^6",3,"^7",117,"^8",17,"^3","ClojureScript's default analysis passes."],"^J","~$cljs.analyzer.api/default-passes","^4","cljs/analyzer/api.cljc","^8",17,"^6",1,"^5",115,"^7",117,"^1<","~$cljs.core/IVector","^3","ClojureScript's default analysis passes."],"~$empty-env",["^ ","^Y",null,"^2",["^ ","^4","cljs/analyzer/api.cljc","^5",57,"^6",7,"^7",57,"^8",16,"^Z",["^[",["^10",["^[",[[]]]]],"^3","Creates an empty analysis environment."],"^J","~$cljs.analyzer.api/empty-env","^4","cljs/analyzer/api.cljc","^8",16,"^17",["^[",[[]]],"^1:",null,"^18",["^[",[null,null]],"^6",1,"^14",false,"^5",57,"^1J","^1=","^7",57,"^16",0,"^1>",true,"^Z",["^[",["^10",["^[",[[]]]]],"^3","Creates an empty analysis environment."],"~$default-warning-handler",["^ ","^Y",null,"^2",["^ ","^4","cljs/analyzer/api.cljc","^5",74,"^6",7,"^7",74,"^8",30,"^Z",["^[",["^10",["^[",[["^1L","^Q","~$extra"]]]]],"^3","The default warning handler.\n\n   Outputs the warning messages to *err*."],"^J","~$cljs.analyzer.api/default-warning-handler","^4","cljs/analyzer/api.cljc","^8",30,"^17",["^[",[["^1L","^Q","^21"]]],"^1:",null,"^18",["^[",[null,null]],"^6",1,"^14",false,"^5",74,"^1J",["^B",[null,"^1E"]],"^7",74,"^16",3,"^1>",true,"^Z",["^[",["^10",["^[",[["^1L","^Q","^21"]]]]],"^3","The default warning handler.\n\n   Outputs the warning messages to *err*."],"^G",["^ ","^Y",null,"^2",["^ ","^4","cljs/analyzer/api.cljc","^5",229,"^6",7,"^7",229,"^8",17,"^Z",["^[",["^10",["^[",[["^1?"],["^12","^1?"]]]]],"^3","Given a namespace return all the var analysis maps. Analagous to\n  clojure.core/ns-interns but returns var analysis maps not vars.","^13",["^ ","^14",false,"^15",2,"^16",2,"^17",[["^1?"],["^12","^1?"]],"^Z",["^[",[["^1?"],["^12","^1?"]]],"^18",["^[",[null,null]]]],"^J","~$cljs.analyzer.api/ns-interns","^4","cljs/analyzer/api.cljc","^8",17,"^13",["^ ","^14",false,"^15",2,"^16",2,"^17",[["^1?"],["^12","^1?"]],"^Z",["^[",[["^1?"],["^12","^1?"]]],"^18",["^[",[null,null]]],"^17",[["^1?"],["^12","^1?"]],"^1:",null,"^15",2,"^18",["^[",[null,null]],"^6",1,"^14",false,"^1;",[["^ ","^15",1,"^14",false,"^1<","^1="],["^ ","^15",2,"^14",false,"^1<",["^B",["^1=","^1E"]]]],"^5",229,"^7",229,"^16",2,"^1>",true,"^Z",["^[",[["^1?"],["^12","^1?"]]],"^3","Given a namespace return all the var analysis maps. Analagous to\n  clojure.core/ns-interns but returns var analysis maps not vars."],"^H",["^ ","^Y",null,"^2",["^ ","^4","cljs/analyzer/api.cljc","^5",212,"^6",7,"^7",212,"^8",13,"^Z",["^[",["^10",["^[",[[],["^12"]]]]],"^3","Return all namespaces. Analagous to clojure.core/all-ns but\n  returns symbols identifying namespaces not Namespace instances.","^13",["^ ","^14",false,"^15",1,"^16",1,"^17",[[],["^12"]],"^Z",["^[",[[],["^12"]]],"^18",["^[",[null,null]]]],"^J","~$cljs.analyzer.api/all-ns","^4","cljs/analyzer/api.cljc","^8",13,"^13",["^ ","^14",false,"^15",1,"^16",1,"^17",[[],["^12"]],"^Z",["^[",[[],["^12"]]],"^18",["^[",[null,null]]],"^17",[[],["^12"]],"^1:",null,"^15",1,"^18",["^[",[null,null]],"^6",1,"^14",false,"^1;",[["^ ","^15",0,"^14",false,"^1<","^1="],["^ ","^15",1,"^14",false,"^1<",["^B",["~$cljs.core/KeySeq","^1E"]]]],"^5",212,"^7",212,"^16",1,"^1>",true,"^Z",["^[",[[],["^12"]]],"^3","Return all namespaces. Analagous to clojure.core/all-ns but\n  returns symbols identifying namespaces not Namespace instances."],"~$current-file",["^ ","^Y",null,"^2",["^ ","^4","cljs/analyzer/api.cljc","^5",41,"^6",7,"^7",41,"^8",19,"^Z",["^[",["^10",["^[",[[]]]]],"^3","Return the current file under analysis or compilation."],"^J","~$cljs.analyzer.api/current-file","^4","cljs/analyzer/api.cljc","^8",19,"^17",["^[",[[]]],"^1:",null,"^18",["^[",[null,null]],"^6",1,"^14",false,"^5",41,"^1J","^1=","^7",41,"^16",0,"^1>",true,"^Z",["^[",["^10",["^[",[[]]]]],"^3","Return the current file under analysis or compilation."],"~$current-ns",["^ ","^Y",null,"^2",["^ ","^4","cljs/analyzer/api.cljc","^5",46,"^6",7,"^7",46,"^8",17,"^Z",["^[",["^10",["^[",[[]]]]],"^3","Return the current ns under analysis or compilation."],"^J","~$cljs.analyzer.api/current-ns","^4","cljs/analyzer/api.cljc","^8",17,"^17",["^[",[[]]],"^1:",null,"^18",["^[",[null,null]],"^6",1,"^14",false,"^5",46,"^1J","^1=","^7",46,"^16",0,"^1>",true,"^Z",["^[",["^10",["^[",[[]]]]],"^3","Return the current ns under analysis or compilation."],"^I",["^ ","^Y",null,"^2",["^ ","^4","cljs/analyzer/api.cljc","^5",200,"^6",7,"^7",200,"^8",14,"^Z",["^[",["^10",["^[",[["^Q","^11"]]]]],"^3","Given an analysis environment resolve a var. Analogous to\n   clojure.core/resolve"],"^J","~$cljs.analyzer.api/resolve","^4","cljs/analyzer/api.cljc","^8",14,"^17",["^[",[["^Q","^11"]]],"^1:",null,"^18",["^[",[null,null]],"^6",1,"^14",false,"^5",200,"^7",200,"^16",2,"^1>",true,"^Z",["^[",["^10",["^[",[["^Q","^11"]]]]],"^3","Given an analysis environment resolve a var. Analogous to\n   clojure.core/resolve"],"~$get-js-index",["^ ","^Y",null,"^2",["^ ","^4","cljs/analyzer/api.cljc","^5",108,"^6",7,"^7",108,"^8",19,"^Z",["^[",["^10",["^[",[[],["^12"]]]]],"^3","Return the currently computed Google Closure js dependency index from the\n  compiler state.","^13",["^ ","^14",false,"^15",1,"^16",1,"^17",[[],["^12"]],"^Z",["^[",[[],["^12"]]],"^18",["^[",[null,null]]]],"^J","~$cljs.analyzer.api/get-js-index","^4","cljs/analyzer/api.cljc","^8",19,"^13",["^ ","^14",false,"^15",1,"^16",1,"^17",[[],["^12"]],"^Z",["^[",[[],["^12"]]],"^18",["^[",[null,null]]],"^17",[[],["^12"]],"^1:",null,"^15",1,"^18",["^[",[null,null]],"^6",1,"^14",false,"^1;",[["^ ","^15",0,"^14",false,"^1<","^1="],["^ ","^15",1,"^14",false,"^1<",["^B",["^1=","^1E"]]]],"^5",108,"^7",108,"^16",1,"^1>",true,"^Z",["^[",[[],["^12"]]],"^3","Return the currently computed Google Closure js dependency index from the\n  compiler state."]],"~:require-macros",["^ ","^R","^R"],"~:cljs.analyzer/constants",["^ ","^T",["^B",["~:cljs.analyzer/namespaces","~:private","~:macros","~:js-dependency-index","^X","~:options"]],"~:order",["^2C","^2B","^2?","^2A","^X","^2@"]],"~:flags",["^ ","^U",["^B",[]]],"~:js-deps",["^ "],"~:deps",["^S","^R","^N","^P"]]
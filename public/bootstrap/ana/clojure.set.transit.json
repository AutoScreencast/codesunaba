["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","clojure/set.cljs","~:line",11,"~:column",8,"~:end-line",11,"~:end-column",19,"~:doc","Set operations such as union/intersection.","~:author","Rich Hickey"],"~:ns-aliases",["^ ","~$cljs.loader","~$shadow.loader","~$react","~$module$node_modules$react$index","~$react-dom","~$module$node_modules$react_dom$index"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$clojure.set","~:imports",null,"~:requires",["^ ","~$cljs.core","^H","~$goog","^I"],"~:seen",["^C",[]],"~:shadow/js-access-global",["^C",["Error"]],"~:uses",null,"~:defs",["^ ","~$union",["^ ","~:protocol-inline",null,"^2",["^ ","^3","clojure/set.cljs","^4",19,"^5",7,"^6",19,"^7",12,"~:arglists",["~#list",["~$quote",["^Q",[[],["~$s1"],["^S","~$s2"],["^S","^T","~$&","~$sets"]]]]],"^8","Return a set that is the union of the input sets","~:top-fn",["^ ","~:variadic?",true,"~:fixed-arity",2,"~:max-fixed-arity",2,"~:method-params",[[],["^S"],["^S","^T"]],"^P",["^Q",[[],["^S"],["^S","^T"],["^S","^T","~$&","^U"]]],"~:arglists-meta",["^Q",[null,null,null,null]]]],"^D","~$clojure.set/union","^3","clojure/set.cljs","^7",12,"^V",["^ ","^W",true,"^X",2,"^Y",2,"^Z",[[],["^S"],["^S","^T"]],"^P",["^Q",[[],["^S"],["^S","^T"],["^S","^T","~$&","^U"]]],"^[",["^Q",[null,null,null,null]]],"^Z",[[],["^S"],["^S","^T"]],"~:protocol-impl",null,"^X",2,"^[",["^Q",[null,null,null,null]],"^5",1,"^W",true,"~:methods",[["^ ","^X",0,"^W",false,"~:tag","~$cljs.core/ISet"],["^ ","^X",1,"^W",false],["^ ","^X",2,"^W",false,"^13",["^C",[null,"~$any"]]],["^ ","^X",2,"^W",true,"^13",["^C",[null,"^15"]]]],"^4",19,"^6",19,"^Y",2,"~:fn-var",true,"^P",["^Q",[[],["^S"],["^S","^T"],["^S","^T","~$&","^U"]]],"^8","Return a set that is the union of the input sets"],"~$map-invert",["^ ","^O",null,"^2",["^ ","^3","clojure/set.cljs","^4",97,"^5",7,"^6",97,"^7",17,"^P",["^Q",["^R",["^Q",[["~$m"]]]]],"^8","Returns the map with the vals mapped to the keys."],"^D","~$clojure.set/map-invert","^3","clojure/set.cljs","^7",17,"^Z",["^Q",[["~$m"]]],"^11",null,"^[",["^Q",[null,null]],"^5",1,"^W",false,"^4",97,"~:ret-tag",["^C",[null,"^15"]],"^6",97,"^Y",1,"^16",true,"^P",["^Q",["^R",["^Q",[["~$m"]]]]],"^8","Returns the map with the vals mapped to the keys."],"~$join",["^ ","^O",null,"^2",["^ ","^3","clojure/set.cljs","^4",101,"^5",7,"^6",101,"^7",11,"^P",["^Q",["^R",["^Q",[["~$xrel","~$yrel"],["^1;","^1<","~$km"]]]]],"^8","When passed 2 rels, returns the rel corresponding to the natural\n  join. When passed an additional keymap, joins on the corresponding\n  keys.","^V",["^ ","^W",false,"^X",3,"^Y",3,"^Z",[["^1;","^1<"],["^1;","^1<","^1="]],"^P",["^Q",[["^1;","^1<"],["^1;","^1<","^1="]]],"^[",["^Q",[null,null]]]],"^D","~$clojure.set/join","^3","clojure/set.cljs","^7",11,"^V",["^ ","^W",false,"^X",3,"^Y",3,"^Z",[["^1;","^1<"],["^1;","^1<","^1="]],"^P",["^Q",[["^1;","^1<"],["^1;","^1<","^1="]]],"^[",["^Q",[null,null]]],"^Z",[["^1;","^1<"],["^1;","^1<","^1="]],"^11",null,"^X",3,"^[",["^Q",[null,null]],"^5",1,"^W",false,"^12",[["^ ","^X",2,"^W",false,"^13",["^C",[null,"^15","^14"]]],["^ ","^X",3,"^W",false,"^13",["^C",[null,"^15"]]]],"^4",101,"^6",101,"^Y",3,"^16",true,"^P",["^Q",[["^1;","^1<"],["^1;","^1<","^1="]]],"^8","When passed 2 rels, returns the rel corresponding to the natural\n  join. When passed an additional keymap, joins on the corresponding\n  keys."],"~$select",["^ ","^O",null,"^2",["^ ","^3","clojure/set.cljs","^4",61,"^5",7,"^6",61,"^7",13,"^P",["^Q",["^R",["^Q",[["~$pred","~$xset"]]]]],"^8","Returns a set of the elements for which pred is true"],"^D","~$clojure.set/select","^3","clojure/set.cljs","^7",13,"^Z",["^Q",[["^1@","^1A"]]],"^11",null,"^[",["^Q",[null,null]],"^5",1,"^W",false,"^4",61,"^19",["^C",[null,"^15"]],"^6",61,"^Y",2,"^16",true,"^P",["^Q",["^R",["^Q",[["^1@","^1A"]]]]],"^8","Returns a set of the elements for which pred is true"],"~$intersection",["^ ","^O",null,"^2",["^ ","^3","clojure/set.cljs","^4",31,"^5",7,"^6",31,"^7",19,"^P",["^Q",["^R",["^Q",[["^S"],["^S","^T"],["^S","^T","~$&","^U"]]]]],"^8","Return a set that is the intersection of the input sets","^V",["^ ","^W",true,"^X",2,"^Y",2,"^Z",[["^S"],["^S","^T"]],"^P",["^Q",[["^S"],["^S","^T"],["^S","^T","~$&","^U"]]],"^[",["^Q",[null,null,null]]]],"^D","~$clojure.set/intersection","^3","clojure/set.cljs","^7",19,"^V",["^ ","^W",true,"^X",2,"^Y",2,"^Z",[["^S"],["^S","^T"]],"^P",["^Q",[["^S"],["^S","^T"],["^S","^T","~$&","^U"]]],"^[",["^Q",[null,null,null]]],"^Z",[["^S"],["^S","^T"]],"^11",null,"^X",2,"^[",["^Q",[null,null,null]],"^5",1,"^W",true,"^12",[["^ ","^X",1,"^W",false],["^ ","^X",2,"^W",false,"^13",["^C",[null,"^15"]]],["^ ","^X",2,"^W",true,"^13",["^C",[null,"^15"]]]],"^4",31,"^6",31,"^Y",2,"^16",true,"^P",["^Q",[["^S"],["^S","^T"],["^S","^T","~$&","^U"]]],"^8","Return a set that is the intersection of the input sets"],"~$superset?",["^ ","^O",null,"^2",["^ ","^3","clojure/set.cljs","^4",137,"^5",7,"^6",137,"^7",16,"^P",["^Q",["^R",["^Q",[["~$set1","~$set2"]]]]],"^8","Is set1 a superset of set2?"],"^D","~$clojure.set/superset?","^3","clojure/set.cljs","^7",16,"^Z",["^Q",[["^1F","^1G"]]],"^11",null,"^[",["^Q",[null,null]],"^5",1,"^W",false,"^4",137,"^19","~$boolean","^6",137,"^Y",2,"^16",true,"^P",["^Q",["^R",["^Q",[["^1F","^1G"]]]]],"^8","Is set1 a superset of set2?"],"~$index",["^ ","^O",null,"^2",["^ ","^3","clojure/set.cljs","^4",87,"^5",7,"^6",87,"^7",12,"^P",["^Q",["^R",["^Q",[["^1;","~$ks"]]]]],"^8","Returns a map of the distinct values of ks in the xrel mapped to a\n  set of the maps in xrel with the corresponding values of ks."],"^D","~$clojure.set/index","^3","clojure/set.cljs","^7",12,"^Z",["^Q",[["^1;","^1K"]]],"^11",null,"^[",["^Q",[null,null]],"^5",1,"^W",false,"^4",87,"^19",["^C",[null,"^15"]],"^6",87,"^Y",2,"^16",true,"^P",["^Q",["^R",["^Q",[["^1;","^1K"]]]]],"^8","Returns a map of the distinct values of ks in the xrel mapped to a\n  set of the maps in xrel with the corresponding values of ks."],"~$bubble-max-key",["^ ","^O",null,"^2",["^ ","^3","clojure/set.cljs","^4",13,"^5",8,"^6",13,"^7",22,"~:private",true,"^P",["^Q",["^R",["^Q",[["~$k","~$coll"]]]]]],"^1N",true,"^D","~$clojure.set/bubble-max-key","^3","clojure/set.cljs","^7",22,"^Z",["^Q",[["~$k","^1O"]]],"^11",null,"^[",["^Q",[null,null]],"^5",1,"^W",false,"^4",13,"^19","~$clj","^6",13,"^Y",2,"^16",true,"^P",["^Q",["^R",["^Q",[["~$k","^1O"]]]]]],"~$subset?",["^ ","^O",null,"^2",["^ ","^3","clojure/set.cljs","^4",131,"^5",7,"^6",131,"^7",14,"^P",["^Q",["^R",["^Q",[["^1F","^1G"]]]]],"^8","Is set1 a subset of set2?"],"^D","~$clojure.set/subset?","^3","clojure/set.cljs","^7",14,"^Z",["^Q",[["^1F","^1G"]]],"^11",null,"^[",["^Q",[null,null]],"^5",1,"^W",false,"^4",131,"^19","^1I","^6",131,"^Y",2,"^16",true,"^P",["^Q",["^R",["^Q",[["^1F","^1G"]]]]],"^8","Is set1 a subset of set2?"],"~$rename",["^ ","^O",null,"^2",["^ ","^3","clojure/set.cljs","^4",82,"^5",7,"^6",82,"^7",13,"^P",["^Q",["^R",["^Q",[["^1;","~$kmap"]]]]],"^8","Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap"],"^D","~$clojure.set/rename","^3","clojure/set.cljs","^7",13,"^Z",["^Q",[["^1;","^1U"]]],"^11",null,"^[",["^Q",[null,null]],"^5",1,"^W",false,"^4",82,"^19",["^C",["^1Q","^15","^14","~$cljs.core/MetaFn","~$clj-nil"]],"^6",82,"^Y",2,"^16",true,"^P",["^Q",["^R",["^Q",[["^1;","^1U"]]]]],"^8","Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap"],"~$rename-keys",["^ ","^O",null,"^2",["^ ","^3","clojure/set.cljs","^4",72,"^5",7,"^6",72,"^7",18,"^P",["^Q",["^R",["^Q",[["~$map","^1U"]]]]],"^8","Returns the map with the keys in kmap renamed to the vals in kmap"],"^D","~$clojure.set/rename-keys","^3","clojure/set.cljs","^7",18,"^Z",["^Q",[["^1Z","^1U"]]],"^11",null,"^[",["^Q",[null,null]],"^5",1,"^W",false,"^4",72,"^19",["^C",[null,"^15"]],"^6",72,"^Y",2,"^16",true,"^P",["^Q",["^R",["^Q",[["^1Z","^1U"]]]]],"^8","Returns the map with the keys in kmap renamed to the vals in kmap"],"~$project",["^ ","^O",null,"^2",["^ ","^3","clojure/set.cljs","^4",67,"^5",7,"^6",67,"^7",14,"^P",["^Q",["^R",["^Q",[["^1;","^1K"]]]]],"^8","Returns a rel of the elements of xrel with only the keys in ks"],"^D","~$clojure.set/project","^3","clojure/set.cljs","^7",14,"^Z",["^Q",[["^1;","^1K"]]],"^11",null,"^[",["^Q",[null,null]],"^5",1,"^W",false,"^4",67,"^19",["^C",["^1Q","^15","^14","^1W","^1X"]],"^6",67,"^Y",2,"^16",true,"^P",["^Q",["^R",["^Q",[["^1;","^1K"]]]]],"^8","Returns a rel of the elements of xrel with only the keys in ks"],"~$difference",["^ ","^O",null,"^2",["^ ","^3","clojure/set.cljs","^4",46,"^5",7,"^6",46,"^7",17,"^P",["^Q",["^R",["^Q",[["^S"],["^S","^T"],["^S","^T","~$&","^U"]]]]],"^8","Return a set that is the first set without elements of the remaining sets","^V",["^ ","^W",true,"^X",2,"^Y",2,"^Z",[["^S"],["^S","^T"]],"^P",["^Q",[["^S"],["^S","^T"],["^S","^T","~$&","^U"]]],"^[",["^Q",[null,null,null]]]],"^D","~$clojure.set/difference","^3","clojure/set.cljs","^7",17,"^V",["^ ","^W",true,"^X",2,"^Y",2,"^Z",[["^S"],["^S","^T"]],"^P",["^Q",[["^S"],["^S","^T"],["^S","^T","~$&","^U"]]],"^[",["^Q",[null,null,null]]],"^Z",[["^S"],["^S","^T"]],"^11",null,"^X",2,"^[",["^Q",[null,null,null]],"^5",1,"^W",true,"^12",[["^ ","^X",1,"^W",false],["^ ","^X",2,"^W",false,"^13",["^C",[null,"^15"]]],["^ ","^X",2,"^W",true,"^13",["^C",[null,"^15"]]]],"^4",46,"^6",46,"^Y",2,"^16",true,"^P",["^Q",[["^S"],["^S","^T"],["^S","^T","~$&","^U"]]],"^8","Return a set that is the first set without elements of the remaining sets"]],"~:require-macros",["^ ","^H","^H"],"~:flags",["^ "],"~:js-deps",["^ "],"~:deps",["^I","^H"]]